/*
 * Copyright (C) 2016 Matej Hrazdira.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

$$$ BGN $$$
#ifndef CORBABINDINGLIB_H_
#define CORBABINDINGLIB_H_

#include <orbsvcs/CosNamingC.h>
#include <orbsvcs/RtecEventChannelAdminC.h>
#include <orbsvcs/Event_Utilities.h>
#include <orbsvcs/RtecEventCommS.h>
#include <tao/IORTable/IORTable.h>
#include <tao/PortableServer/PortableServer.h>
#include <tao/Messaging/Messaging.h>
#include <ace/Thread_Manager.h>

namespace corbabinding {

class ThreadCleanup {
public:
	ThreadCleanup() {}
	virtual ~ThreadCleanup() {}

	virtual void cleanup() = 0;
};

class NativeWrapper {
public:
	NativeWrapper(int argc, ACE_TCHAR * argv[], ThreadCleanup * cleanup = nullptr);

	virtual ~NativeWrapper();

	CosNaming::NamingContext_ptr getNameService() {
		return mNameService.ptr();
	}

	PortableServer::POA_ptr getPoa() {
		return mPoa.ptr();
	}

	template<typename T> void bindName(const char * name, T object) {
		if (!CORBA::is_nil(mNameService)) {
			CosNaming::Name n(1);
			n.length(1);
			n[0].id = CORBA::string_dup(name);
			mNameService->rebind(n, object);
		}
		if (!CORBA::is_nil(mIorTable)) {
			CORBA::String_var objectStr = mOrb->object_to_string(object);
			mIorTable->rebind(name, objectStr);
		} else {
			throw CORBA::UNKNOWN(0, CORBA::CompletionStatus::COMPLETED_NO);
		}
	}

	void unbind(const char * name);

	CORBA::Object_ptr resolve(const char * corbaStr);

	void setOrbRelativeRtTimeout(long long timeoutMs);

	template<typename T> T * setObjectRelativeRtTimeout(T * object, long long timeoutMs) {
		TimeBase::TimeT relativeRtTimeout = timeoutMs * 1.0e4;
		CORBA::Any timeoutAsAny;
		timeoutAsAny <<= relativeRtTimeout;

		CORBA::PolicyList policyList;
		policyList.length(1);
		policyList[0] = mOrb->create_policy(Messaging::RELATIVE_RT_TIMEOUT_POLICY_TYPE, timeoutAsAny);

		CORBA::Object_var resultObj = object->_set_policy_overrides(policyList, CORBA::SET_OVERRIDE);

		for (CORBA::ULong i = 0; i < policyList.length(); ++i) {
			policyList[i]->destroy();
		}

		typename T::_var_type result = T::_narrow(resultObj);
		return result._retn();
	}

private:
	CORBA::ORB_var mOrb;
	PortableServer::POA_var mPoa;
	PortableServer::POAManager_var mPoaManager;
	CosNaming::NamingContext_var mNameService;
	IORTable::Table_var mIorTable;
	ACE_Thread_Manager mThreadManager;
	ThreadCleanup * mThreadCleanup;

	static void * runOrb(void * arg);
};

class EventServiceWrapper {
public:
	EventServiceWrapper(NativeWrapper * nativeWrapper, const char * eventServiceStr) : mNativeWrapper(nativeWrapper), mEventServiceStr(eventServiceStr) {}

	RtecEventChannelAdmin::EventChannel_ptr getEventService() {
		return mEventService.ptr();
	}

	PortableServer::POA_ptr getPoa() {
		return mNativeWrapper->getPoa();
	}

	virtual ~EventServiceWrapper();

	void connect();

	bool isAlive();

private:
	NativeWrapper * mNativeWrapper;
	CORBA::String_var mEventServiceStr;
	RtecEventChannelAdmin::EventChannel_var mEventService;
};

class AnyEventConsumer: public POA_RtecEventComm::PushConsumer {
public:
	AnyEventConsumer(CORBA::ULong type) : mType(type), mWrapper(nullptr) {}

	virtual ~AnyEventConsumer() {}

	void connect(EventServiceWrapper * wraper) {
		mWrapper = wraper;
		ACE_ConsumerQOS_Factory qos;
		qos.start_disjunction_group();
		qos.insert_type(mType, 0);
		RtecEventChannelAdmin::EventChannel_ptr eventService = wraper->getEventService();
		if (CORBA::is_nil(eventService)) {
			throw CORBA::UNKNOWN(0, CORBA::CompletionStatus::COMPLETED_NO);
		}
		RtecEventChannelAdmin::ConsumerAdmin_var consumerAdmin = eventService->for_consumers();
		mSupplierProxy = consumerAdmin->obtain_push_supplier();
		RtecEventComm::PushConsumer_var self = _this();
		mSupplierProxy->connect_push_consumer(self.in(), qos.get_ConsumerQOS());
	}

	void push(const RtecEventComm::EventSet& data) {
		for (CORBA::ULong i = 0; i != data.length(); ++i) {
			const RtecEventComm::Event &e = data[i];
			onAnyEvent(e.data.any_value);
		}
	}

	virtual void onAnyEvent(const CORBA::Any & event) = 0;

	void disconnect() {
		mSupplierProxy->disconnect_push_supplier();
		PortableServer::POA_ptr poa = mWrapper->getPoa();
		PortableServer::ObjectId_var id = poa->servant_to_id(this);
		poa->deactivate_object(id);
		_remove_ref();
	}

	void disconnect_push_consumer() {
		mSupplierProxy = RtecEventChannelAdmin::ProxyPushSupplier::_nil();
	}

private:
	CORBA::ULong mType;
	RtecEventChannelAdmin::ProxyPushSupplier_var mSupplierProxy;
	EventServiceWrapper * mWrapper;
};

template<typename T>
class AbsEventConsumer : public AnyEventConsumer {
public:
	AbsEventConsumer(CORBA::ULong type, const char * name = "EventConsumer") : AnyEventConsumer(type) {}

	void onAnyEvent(const CORBA::Any & e) {
		T * event;
		if (e >>= event) {
			onEvent(event);
		}
	}

	virtual void onEvent(T * event) = 0;

};

template<typename T>
class AbsEventProducer: public POA_RtecEventComm::PushSupplier {
public:
	AbsEventProducer(RtecEventComm::EventSourceID sourceId, RtecEventComm::EventType type) :
		mSourceId(sourceId), mType(type), mWrapper(nullptr) {}

	virtual ~AbsEventProducer() {}

	void connect(EventServiceWrapper * wraper) {
		mWrapper = wraper;
		ACE_SupplierQOS_Factory qos;
		qos.insert(mSourceId, mType, 0, 1);
		RtecEventChannelAdmin::SupplierAdmin_var supplierAdmin = wraper->getEventService()->for_suppliers();
		mConsumerProxy = supplierAdmin->obtain_push_consumer();
		RtecEventComm::PushSupplier_var self = _this();
		mConsumerProxy->connect_push_supplier(self.in(), qos.get_SupplierQOS());
	}

	void disconnect() {
		mConsumerProxy->disconnect_push_consumer();
		PortableServer::POA_ptr poa = mWrapper->getPoa();
		PortableServer::ObjectId_var id = poa->servant_to_id(this);
		poa->deactivate_object(id);
		_remove_ref();
	}

	void disconnect_push_supplier(void) {
		mConsumerProxy = RtecEventChannelAdmin::ProxyPushConsumer::_nil();
	}

	void push(const T & data) {
		if (CORBA::is_nil(mConsumerProxy.in())) {
			return;
		}
		RtecEventComm::EventSet eventSet(1);
		eventSet.length(1);
		RtecEventComm::Event &e = eventSet[0];
		e.header.source = mSourceId;
		e.header.type = mType;
		if (!putData(e.data.any_value, data)) {
			return;
		}
		mConsumerProxy->push(eventSet);
		return;
	}

	virtual bool putData(CORBA::Any & event, const T & data) = 0;

private:
	RtecEventComm::EventSourceID mSourceId;
	RtecEventComm::EventType mType;
	RtecEventChannelAdmin::ProxyPushConsumer_var mConsumerProxy;
	EventServiceWrapper * mWrapper;
};

template <typename T>
class ServerWrapper {
public:
	ServerWrapper(T * servant) : mServant(servant), mNativeWrapper(nullptr) {}

	~ServerWrapper() {
		mServant->_remove_ref();
	}

	typename T::_stub_ptr_type activate(NativeWrapper * nativeWrapper) {
		mNativeWrapper = nativeWrapper;
		typename T::_stub_ptr_type servantSelf = mServant->_this();
		return servantSelf;
	}

	void deactivate() {
		PortableServer::POA_ptr poa = mNativeWrapper->getPoa();
		PortableServer::ObjectId_var id = poa->servant_to_id(mServant);
		poa->deactivate_object(id);
		delete this;
	}

private:
	T * mServant;
	NativeWrapper * mNativeWrapper;
};

} /* namespace corbabinding */

#endif /* CORBABINDINGLIB_H_ */
