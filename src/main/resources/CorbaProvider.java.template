/*
 * Copyright (C) 2016 Matej Hrazdira.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

$$$ BGN $$$
package $$$PACKAGE$$$;

public class $$$CLS_NAME$$$ implements $$$DISPOSABLE$$$ {

	private static final int NULL_PTR = 0x0;

	private long mNativeWrapper = NULL_PTR;

	public $$$CLS_NAME$$$(final String[] orbArgs) throws $$$CORBA_SYS_EXCEPTION$$$ {
		mNativeWrapper = init(orbArgs);
	}

	private native long init(final String[] orbArgs) throws $$$CORBA_SYS_EXCEPTION$$$;

	public void connectEventService(final String eventServiceStr) throws $$$CORBA_SYS_EXCEPTION$$$ {
		if (mNativeWrapper == NULL_PTR) {
			throw new $$$ALREADY_DISPOSED_EXCEPTION$$$();
		}
		connectEventServiceImpl(mNativeWrapper, eventServiceStr);
	}

	private native void connectEventServiceImpl(final long nativeWrapper, final String eventServiceStr) throws $$$CORBA_SYS_EXCEPTION$$$;

	public boolean eventServiceAlive() throws $$$CORBA_SYS_EXCEPTION$$$ {
		if (mNativeWrapper == NULL_PTR) {
			throw new $$$ALREADY_DISPOSED_EXCEPTION$$$();
		}
		return eventServiceAliveImpl(mNativeWrapper);
	}

	private native boolean eventServiceAliveImpl(final long nativeWrapper) throws $$$CORBA_SYS_EXCEPTION$$$;

	public <T extends $$$DISPOSABLE$$$> T resolve(Class<T> cls, String corbaStr) throws $$$CORBA_SYS_EXCEPTION$$$ {
		if (mNativeWrapper == NULL_PTR) {
			throw new $$$ALREADY_DISPOSED_EXCEPTION$$$();
		}
		return resolveImpl(mNativeWrapper, cls.getName(), corbaStr);
	}

	private native <T extends $$$DISPOSABLE$$$> T resolveImpl(final long nativeWrapper, final String className, final String corbaStr) throws $$$CORBA_SYS_EXCEPTION$$$;

	@Override
	public Void $$$DISPOSE$$$() throws $$$CORBA_SYS_EXCEPTION$$$ {
		if (mNativeWrapper != NULL_PTR) {
			disposeImpl(mNativeWrapper);
			mNativeWrapper = NULL_PTR;
		}
		return null;
	}

	private native void disposeImpl(final long nativeWrapper) throws $$$CORBA_SYS_EXCEPTION$$$;

	public long getNativeWrapper() throws $$$ALREADY_DISPOSED_EXCEPTION$$$ {
		if (mNativeWrapper == NULL_PTR) {
			throw new $$$ALREADY_DISPOSED_EXCEPTION$$$();
		}
		return mNativeWrapper;
	}
}
